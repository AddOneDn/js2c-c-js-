{"version":3,"sources":["util.js","common.js","func-name-map.js","func-handle-map.js","index.js","test.js"],"names":["Array","prototype","removeByVal","val","index","indexOf","splice","removeByLastVal","lastIndexOf","removeByLastValObj","i","length","value","removeByIndex","String","replaceAll","f","e","reg","RegExp","replace","util","logg","content","console","log","errLogg","func","error","module","exports","NOTFUNC","BASEFUNC","shorChar","common","isState","char","current","input","str","slice","includes","isNotFunc","name","test","isBaseFunc","isExistFunc","FUNC_NAME_MAP","FUNC_HANDLE_MAP","printf","arg","lastQuoIndex","paramStr","argStr","argArr","split","percentage","argIndex","require","WHITESPACE","WORD","isParWord","tokenizer","tokens","temp_index","push","type","word_str","parser","temp_ast","getAst","token","next_token","node","params","isFunc","pre_index","pre_token","ast","body","tempAst","astTraver","visitor","nodeArrTraver","arr","parent","forEach","child","nodeTraver","method","transformer","newAst","_context","StringLiteral","StateLiteral","SemLiteral","WhiteLiteral","ParenbLiteral","CallExpression","expression","callee","arguments","notFunc","generator","map","join","funcName","res","compiler","output","document","getElementById","addEventListener","eval","err","alert"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEtDA,IAAM0B,gBAAgB;AACpB,YAAU;AADU,CAAtB;;AAIAlB,OAAOC,OAAP,GAAiBiB,aAAjkBAAkB;AACtBC,UAAQ,gBAASC,GAAT,EAAc;AACpB,QAAIC,eAAeD,IAAI1C,WAAJ,CAAgB,GAAhB,CAAnB;AACA,QAAI4C,WAAW,EAAf;;AAEA;AACA,QAAIC,SAASH,IAAIV,KAAJ,CAAUW,eAAe,CAAzB,EAA4BD,IAAIvC,MAAhC,EAAwCI,UAAxC,CAAmD,GAAnD,EAAwD,EAAxD,CAAb;;AAEA;AACA,QAAIuC,SAASD,OAAOE,KAAP,CAAa,GAAb,CAAb;;AAEA,QAAIC,aAAaN,IAAI7C,OAAJ,CAAY,GAAZ,CAAjB;;AAEA;AACA,QAAIoD,WAAW,CAAf;;AAEA,QAAID,eAAe,CAAC,CAApB,EAAuB;AACrB;AACAJ,iBAAWF,GAAX;AACD,KAHD,MAGO;AACL,aAAOM,cAAc,CAAC,CAAtB,EAAyB;AACvB;AACAJ,2BAAgBF,IAAIV,KAAJ,CAAU,CAAV,EAAagB,UAAb,CAAhB,aAA+CF,OAAOG,QAAP,CAA/C;;AAEA;AACAP,cAAMA,IAAIV,KAAJ,CAAUgB,aAAa,CAAvB,EAA0BN,IAAIvC,MAA9B,CAAN;;AAEA;AACA6C,qBAAaN,IAAI7C,OAAJ,CAAY,GAAZ,CAAb;;AAEA;AACAoD;;AAEA,YAAGD,cAAc,CAAC,CAAlB,EAAqB;AACnBJ,sBAAY,KAAZ;AACD;AACF;AACF;;AAED,WAAOA,QAAP;AACD;AAxCqB,CAAxB;;AA2CAvB,OAAOC,OAAP,GAAiBkB,eAAjB","file":"a8f89558c1a7a35d0326e4a4fab76ef7.map","sourcesContent":["// 按值删除数组中元素\nArray.prototype.removeByVal = function(val) {\n  var index = this.indexOf(val);\n  if (index > -1) {\n    this.splice(index, 1);\n  }\n};\n\n// 按值删除数组中最后一个匹配的元素\nArray.prototype.removeByLastVal = function(val) {\n  var index = this.lastIndexOf(val);\n  if (index > -1) {\n    this.splice(index, 1);\n  }\n};\n\n// 按值删除数组对象中最后一个匹配的元素\nArray.prototype.removeByLastValObj = function(val) {\n  let index = -1;\n  for(let i = 0 ; i < this.length ; i++) {\n    if(this[i].value === val) index = i;\n  }\n  if (index > -1) {\n    this.splice(index, 1);\n  }\n};\n\n// 按索引删除数组中元素\nArray.prototype.removeByIndex = function(index) {\n  this.splice(index, 1);\n};\n\n// 全部替换\nString.prototype.replaceAll = function(f, e) {\n  const reg = new RegExp(f, \"g\");  \n  return this.replace(reg, e); \n}\n\nconst util = {\n  logg: function(content) {\n    console.log('--------------------------------------------\\n');\n    console.log(content);\n    console.log();\n    console.log('--------------------------------------------\\n');\n  },\n\n  errLogg: function(func, content) {\n    console.log(\"-------------error------------\\n\");\n    console.error(`${func}: ${content}`);\n    console.log();\n    console.log('-------------error------------\\n');\n  }\n}\n\nmodule.exports = util;","const NOTFUNC = /^(if|else|else if|for|while)[\\s]*$/;\nconst BASEFUNC = /^(print|printf)[\\s]*$/;\nconst shorChar = ['c', 'i', 's', 'l', 'd', 'f', 'b'];\n\nconst common = {\n  isState: function(char, current, input) {\n\n    let str = input.slice(current, current + 7);\n  \n    if(str.indexOf(\"char\") != -1 || str.indexOf(\"int\") != -1 || str.indexOf(\"short\") != -1 || str.indexOf(\"long\") != -1 || str.indexOf(\"double\") != -1 || str.indexOf(\"float\") != -1 || str.indexOf(\"string\") != -1 || str.indexOf(\"bool\") != -1) {\n      if(!shorChar.includes(char)){\n        return false;\n      }\n      if(str.indexOf(' ') === -1) {\n        return false;\n      }\n      return true;\n    }\n\n    str = input.slice(current, current + 10);\n    if(str.indexOf(\"long long\") != -1 || str.indexOf(\"long double\") != -1) {\n      if(char != 'l') {\n        return false;\n      }\n      if(str.indexOf(' ') === -1) {\n        return false;\n      }\n      return true;\n    }\n\n    return false;\n  },\n\n  isNotFunc: function(name) {\n    if(NOTFUNC.test(name)) {\n      return true;\n    }\n\n    // 是函数\n    return false;\n  },\n\n  isBaseFunc: function(name) {\n    if(BASEFUNC.test(name)) {\n      return name;\n    }\n\n    return false;\n  },\n\n  isExistFunc: function(name) {\n    if(name.includes('=')) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = common;","const FUNC_NAME_MAP = {\n  'printf': 'console.log'\n}\n\nmodule.exports = FUNC_NAME_MAP;\n","const FUNC_HANDLE_MAP = {\n  printf: function(arg) {\n    let lastQuoIndex = arg.lastIndexOf('\"');\n    let paramStr = '';\n\n    // 获取后面参数，+2跳过引号和逗号, 最后再去掉空格\n    let argStr = arg.slice(lastQuoIndex + 2, arg.length).replaceAll(' ', '');\n\n    // 获取参数数组\n    let argArr = argStr.split(',')\n\n    let percentage = arg.indexOf('%');\n\n    // 起始为1跳过引号\n    let argIndex = 0;\n\n    if (percentage === -1) {\n      // 没有参数则直接返回字符串\n      paramStr = arg;\n    } else {\n      while (percentage != -1) {\n        // 用加号拼接str和参数\n        paramStr += `'${arg.slice(1, percentage)}' + ${argArr[argIndex]}`\n  \n        // 将之前的字符串截取出去\n        arg = arg.slice(percentage + 1, arg.length);\n  \n        // 获取下一个占位符\n        percentage = arg.indexOf('%');\n        \n        // 参数数组自增\n        argIndex++;\n  \n        if(percentage != -1) {\n          paramStr += ' + ';\n        }\n      }\n    }\n    \n    return paramStr;\n  }\n}\n\nmodule.exports = FUNC_HANDLE_MAP;\n","const util = require('./util');\nconst common = require('./common');\nconst FUNC_NAME_MAP = require('./func-name-map');\nconst FUNC_HANDLE_MAP = require('./func-handle-map');\n\nconst input = \n`\n#include \"stdlib.h\"\n\nint add(a,b){\n  int sum = a + b;\n  return sum;\n};\nint main() {\n  string str = \"hello world\";\n  int a = 3, b = 1;\n  int res = add(a, b);\n  if( res > a ) {\n    printf(\"the result is %d\", res);\n  } else {\n    printf(\"%s\", str);\n  };\n  return 0;\n}`\n\nconst WHITESPACE = /\\s/;\nconst WORD = /[a-z0-9 | :~,'\"%=+/\\-*/^></\\[/\\]!.&]/i;\n\nlet isParWord = false; // 是否为出现在字符串中的括号， 若存在则不单独匹配成一个括号\n\n// 字符串转token\nfunction tokenizer(input) {\n  // 字符串当前位置\n  let current = 0;\n\n  // 存放token\n  let tokens = [];\n\n  // 循环输入的字符串\n  while (current < input.length) {\n    \n    // 获取当前字符\n    let char = input[current];\n\n    // 检查是否为声明\n    if (common.isState(char, current, input)) {\n      // 获取声明后空格索引\n      let temp_index = input.slice(current, current + 10).indexOf(' ');\n      // 获取声明\n      \n      current = current + temp_index + 1;\n\n      tokens.push({\n        type: 'state',\n        value: 'var'\n      });\n\n      continue;\n    }\n    // 检查是否为括号\n    if (char === '(') {\n      isParWord = true; // 在括号中\n\n      // token添加\n      tokens.push({\n        type: 'paren',\n        value: '('\n      })\n      // 继续循环\n      current++;\n      continue;\n    }\n    \n    if (char === ')') {\n      isParWord = false; // 括号结束\n\n      tokens.push({\n        type: 'paren',\n        value: ')'\n      })\n      current++;\n      continue;\n    }\n\n    // 检查是否为大括号\n    if (char === '{') {\n      tokens.push({\n        type: 'parenb',\n        value: '{'\n      })\n      current++;\n      continue;\n    }\n\n    if (char === '}') {\n      tokens.push({\n        type: 'parenb',\n        value: '}'\n      })\n      current++;\n      continue;\n    }\n\n    // 检查是否为分号\n    if (char === ';') {\n      tokens.push({\n        type: 'semicolon',\n        value: ';'\n      })\n      current++;\n      continue;\n    }\n\n    // 检查是否为空格\n    if (WHITESPACE.test(char)) {\n      tokens.push({\n        type: 'whitespace',\n        value: ' '\n      })\n      current++;\n      continue;\n    }\n\n    // 检查是否为字符\n    if (WORD.test(char)) {\n      let word_str = '';\n\n      // 直到遇到非字符，如果为字符串中的左括号或者右括号也加入字符串中\n      // 左括号通过之前的起始(来判断是否在字符串中\n      // 右括号通过判断其后面是否有'来确认是否为终结括号\n      while((WORD.test(char) && char) || (char === '(' && isParWord) || (char === ')' && input[current + 1] === \"'\")) {\n        word_str += char;\n        char = input[++current];\n      }\n\n      tokens.push({\n        type: 'string',\n        value: word_str\n      })\n\n      continue;\n    }\n\n    // 检查是否为库声明\n    if (char === '#') {\n      while(char != '\\n') {\n        char = input[++current];\n      }\n\n      continue;\n    }\n\n    current++;\n  }\n\n  return tokens;\n}\n\n// tokens转ast\nfunction parser(tokens) {\n  let current = 0;\n\n  let temp_ast;\n  // 递归遍历\n  function getAst() {\n    // 遍历token数组\n\n    let token = tokens[current];\n\n    // 判断是否为string类型\n    if(token.type === 'string') {\n      current++;\n      \n      // 判断后面是否为函数\n      let next_token = tokens[current];\n      if(next_token && next_token.type === 'paren' && next_token.value === '(') {\n        return null;\n      }\n\n      // 否则返回string\n      return {\n        type: 'StringLiteral',\n        value: token.value\n      }\n    }\n\n    if(token.type === 'semicolon') {\n      current++;\n\n      return {\n        type: 'SemLiteral',\n        value: token.value\n      }\n    }\n\n    if(token.type === 'whitespace') {\n      current++;\n\n      return {\n        type: 'WhiteLiteral',\n        value: token.value\n      }\n    }\n\n    // 判断是否为类型声明\n    if(token.type === 'state') {\n      current++;\n\n      return {\n        type: 'StateLiteral',\n        value: token.value\n      }\n    }\n\n    // 判断是否为大括号\n    if (token.type === 'parenb' && (token.value === '{' || token.value === '}')) {\n      current++;\n\n      return {\n        type: 'ParenbLiteral',\n        value: token.value\n      };\n    }\n\n\n    // 判断是否为括号\n    if(token.type === 'paren' && token.value === '(') {\n      // 创建CallExpression节点\n      let node = {\n        type: 'CallExpression',\n        params: [],\n        name: '',\n        isFunc: true,\n        isBaseFunc: true,\n        isExistFunc: false\n      }\n\n      // 获取函数名\n      let pre_index = current - 1;\n      let pre_token = tokens[pre_index];\n\n      if(pre_token.type === 'string') {\n        node.name = pre_token.value;\n\n        // 判断是否为函数\n        let isNotFunc = common.isNotFunc(node.name);\n\n        if(isNotFunc) {\n          node.isFunc = false;\n        } else {\n          // 判断是否为基本函数\n          let isBaseFunc = common.isBaseFunc(node.name);\n\n          if(!isBaseFunc) {\n            ast.body.removeByLastValObj('var');\n            node.isBaseFunc = false;\n          }\n\n          // 判断是否为已有函数\n          let isExistFunc = common.isExistFunc(node.name);\n          if(isExistFunc) {\n            node.isExistFunc = true;\n          }\n        }\n      }\n      \n      // 删除函数前面的state声明\n\n      // 跳过括号并且获取下一个token\n      token = tokens[++current];\n\n      let tempAst; // 暂存参数\n\n      // 继续遍历直到遇到右括号\n      while ((token.type !== 'paren') || (token.type === 'paren' && token.value !== ')')) {\n        // 参数放入params\n        tempAst = getAst();\n        if(tempAst.type === 'StateLiteral') continue;\n\n        node.params.push(tempAst);\n\n        token = tokens[current];\n\n        if(!token) {\n          util.errLogg('parser过程出错', `存在括号未闭合错误<${current}>`);\n          break;\n        }\n      }\n      // 跳过右括号\n      current++;\n      return node;\n    }\n\n    util.errLogg('parser过程出错', `发现未知类型${token.type}`);\n\n    current++;\n    return;\n  }\n\n  // 创建ast\n  let ast = {\n    type: 'Program',\n    body: []\n  }\n\n  while(current < tokens.length) {\n    temp_ast = getAst();\n    if(temp_ast) ast.body.push(temp_ast);\n  }\n\n  return ast;\n}\n\n\n// 遍历ast处理节点\nfunction astTraver(ast, visitor) {\n\n  function nodeArrTraver(arr, parent) {\n    arr.forEach(function(child) {\n      nodeTraver(child, parent)\n    })\n  }\n\n  function nodeTraver(node, parent) {\n\n    if (!node) {\n      util.errLogg('astTraver过程出错', `括号未闭合或出现未知类型<${parent.type}>`);\n      return;\n    }\n\n    // 获取当前节点处理函数\n    let method = visitor[node.type];\n\n    if(method) {\n      method(node, parent)\n    }\n\n    switch (node.type) {\n      // 顶层，遍历其子元素数组\n      case 'Program':\n        nodeArrTraver(node.body, node);\n        break;\n      \n      // 函数, 遍历其参数数组\n      case 'CallExpression':\n        nodeArrTraver(node.params, node);\n        break;\n      \n      // string, state等没有子节点，跳过\n      case 'StringLiteral':\n        break;\n\n      case 'StateLiteral':\n        break;\n\n      case 'SemLiteral':\n        break;\n      \n      case 'WhiteLiteral':\n        break;\n\n      case 'ParenbLiteral':\n        break;\n      \n      default:\n        util.errLogg('astTraver过程出错', `发现未知类型${node.type}`);\n    }\n  }\n\n  // 从头遍历ast\n  nodeTraver(ast, null);\n}\n\n// 将ast和traver传入得到新的ast\nfunction transformer(ast) {\n  // 创建新的根节点\n  let newAst = {\n    type: 'Program',\n    body: []\n  };\n\n  // 在根节点上创建context上下文，用来存放节点\n  // context是一个引用，从旧的ast到新的\n  ast._context = newAst.body;\n\n  astTraver(ast, {\n    // 处理string\n    StringLiteral: function(node, parent) {\n      // 创建新节点放入父节点context\n      parent._context.push({\n        type: 'StringLiteral',\n        value: node.value\n      });\n    },\n\n    // 处理state\n    StateLiteral: function(node, parent) {\n      parent._context.push({\n        type: 'StateLiteral',\n        value: node.value\n      });\n    },\n\n    // 处理分号\n    SemLiteral: function(node, parent) {\n      parent._context.push({\n        type: 'SemLiteral',\n        value: node.value\n      })\n    },\n\n    // 处理空格\n    WhiteLiteral: function(node, parent) {\n      parent._context.push({\n        type: 'WhiteLiteral',\n        value: node.value\n      })\n    },\n\n    // 处理大括号\n    ParenbLiteral: function(node, parent) {\n      parent._context.push({\n        type: 'ParenbLiteral',\n        value: node.value\n      })\n    },\n\n    // 处理函数\n    CallExpression: function(node, parent) {\n      // 创建CallExpression节点，内嵌套Identifier\n      let expression = {\n        type: 'CallExpression',\n        callee: {\n          type: 'Identifier',\n          name: node.name\n        },\n        isFunc: node.isFunc,\n        isBaseFunc: node.isBaseFunc,\n        isExistFunc: node.isExistFunc,\n        arguments: []\n      };\n\n      // 在CallExpression上创建context, 他是arguments的引用\n      node._context = expression.arguments;\n\n      // 判断父节点是否为函数\n      if(parent.type != 'CallExpression') {\n        expression = {\n          type: 'ExpressionStatement',\n          expression: expression\n        }\n      }\n\n      parent._context.push(expression);\n    }\n\n  });\n\n  return newAst;\n}\n\nlet notFunc = true; // 标记是否为if,else,for,while\n\n// 打印ast中节点拼接成字符串\nfunction generator(node) {\n  switch (node.type) {\n    // 遍历根节点所有子元素\n    case 'Program':\n      return node.body.map(generator).join('');\n    \n    // 对于ExpressionStatements，递归调用其属性并加入分号\n    case 'ExpressionStatement':\n      return (\n        generator(node.expression)\n      )\n\n    // 对于CallExpressions，我们打印出callee和左括号，然后递归调用其参数，最后加上右括号\n    case 'CallExpression':\n      notFunc = false; // 设为false 检测到此值分号不换行\n      let funcName = generator(node.callee);\n      let argArr = node.arguments.map(generator);\n      let res;\n\n      // 是函数\n      if(node.isFunc) {\n        if(node.isBaseFunc) {\n          // 如果是基本函数\n          let paramStr = FUNC_HANDLE_MAP[funcName](argArr.join(''));\n          res = `${FUNC_NAME_MAP[funcName]}(${paramStr})`;\n        } else if(node.isExistFunc) {\n          //如果是已存在函数\n          res = `var ${funcName}(${argArr.join(', ')})`;\n        } else {\n          res = `function ${funcName}(${argArr.join(', ')})`;\n        }\n      } else {\n        // 不是函数\n        res = `${funcName}(${argArr.join('')})`;\n      }\n\n      notFunc = true;\n      return res;\n  \n    // 返回name\n    case 'Identifier':\n      return node.name;\n    \n    // 返回value\n    case 'NumberLiteral':\n      return node.value;\n    \n    case 'StringLiteral':\n      return node.value;\n    \n    case 'StateLiteral':\n      return node.value + ' ';\n    \n    case 'SemLiteral':\n      return (';' + (notFunc ? '\\n' : ''));\n    \n    case 'WhiteLiteral':\n      return ' ';\n\n    case 'ParenbLiteral':\n      return (\n        node.value + (node.value === '{' ? '\\n' : '')\n      );\n\n    default:\n      util.errLogg('generator过程出错', `发现未知类型${node.type}`);\n  }\n}\n\nfunction compiler(input) {\n  let tokens = tokenizer(input);\n  util.logg(tokens);\n  let ast = parser(tokens);\n  util.logg(ast);\n  let newAst = transformer(ast);\n  util.logg(newAst);\n  let output = generator(newAst);\n  // util.logg(output);\n  return output;\n}\n\n// compiler(input);\n\nmodule.exports = compiler;\n","const compiler = require('./index');\n\nlet input = `#include \"stdio.h\";\nint add(int a,b){\n  int sum = a + b;\n  return sum;\n};\nint main() {\n  string str = \"hello world\";\n  int a = 3, b = 1;\n  int res = add(a, b);\n  if( res > a ) {\n    printf(\"the result is %d\", res);\n  } else {\n    printf(\"%s\", str);\n  };\n  return 0;\n}`;\n\nlet test = `int a(int a)`\n\ndocument.getElementById('input').value = input;\n\ndocument.getElementById('transformBtn').addEventListener('click', function() {\n  let value = document.getElementById('input').value;\n  let output = compiler(value);\n  document.getElementById('output').value = output;\n})\n\ndocument.getElementById('executeBtn').addEventListener('click', function() {\n  let value = document.getElementById('output').value;\n  value += `\\nmain();`;\n  try {\n    let log = eval(value);\n    document.getElementById('log').value = log;\n  } catch (err) {\n    alert(err);\n  }\n})"]}